{"version":3,"sources":["webpack:///webpack/bootstrap bd5d20a2d4996a3a1157","webpack:///./lib/tprime.js","webpack:///./lib/world1.js","webpack:///./matter.js"],"names":["canvas","document","querySelector","width","window","innerWidth","height","innerHeight","c","getContext","img","Image","onload","drawImage","src","World1","require","addEventListener","onClick","Matter","Engine","Render","Runner","World","Mouse","Events","Constraint","MouseConstraint","Composites","Common","Bodies","engine","create","world","render","element","body","options","wireframes","showAngleIndicator","ctx","console","log","background","rectangle","isStatic","sprite","texture","xScale","yScale","collisionFilter","group","add","ground","rockOptions","density","frictionAir","rock","polygon","anchor","x","y","elastic","pointA","bodyB","stiffness","ground2","chamfer","radius","pyramid","friction","on","mouseConstraint","mouse","button","position","interval","makeItRain","setInterval","rain","makeItRain2","rain2","makeItRain3","rain3","makeItRain4","raindrop","raindrop2","rainOptions","mass","i","circle","Math","floor","random","runner","run","constraint","visible","gravity","module","exports","f","define","g","global","self","e","t","n","r","s","o","u","a","Error","code","l","call","length","Body","Vertices","Vector","Sleeping","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","id","nextId","type","label","parts","angle","vertices","fromPath","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","restitution","frictionStatic","category","mask","slop","timeScale","opacity","xOffset","yOffset","lineWidth","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","inertia","defaultFillStyle","choose","defaultStrokeStyle","shadeColor","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","Infinity","inverseMass","inverseInertia","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","abs","translation","rotation","scale","scaleX","scaleY","point","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","Composite","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","addBody","addConstraint","addComposite","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","cos","sin","dx","dy","Contact","vertex","normalImpulse","tangentImpulse","index","Detector","SAT","Pair","collisions","broadphasePairs","pairsTable","pairs","table","bodyA","canCollide","overlaps","j","partA","k","partB","pairId","pair","previousCollision","isActive","collision","collides","collided","filterA","filterB","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","column","pairKeys","keys","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","indexesToRemove","pairIndex","Query","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","result","contains","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","contactCount","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","overlapAB","overlapBA","minOverlap","prevCol","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","neg","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","vertexToBody","bodyAPosition","distance","vertexA","vertexB","prevIndex","nextIndex","_minLength","_minDifference","pointB","initialPointA","initialPointB","angularStiffness","angleA","angleB","solveAll","solve","pointAWorld","pointBWorld","currentLength","difference","oAn","oBn","bodyADenom","bodyBDenom","postSolveAll","_triggerEvents","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","_nextId","_seed","argsStart","args","deepClone","Array","prototype","arguments","source","prop","constructor","Object","key","values","color","percent","colorInteger","parseInt","amount","round","R","B","G","shuffle","array","temp","choices","isElement","HTMLElement","nodeType","style","ownerDocument","isArray","now","performance","webkitNow","msNow","oNow","mozNow","Date","_seededRandom","colorToNumber","colorString","replace","charAt","message","warn","haystack","needle","Metrics","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","eventNames","callback","names","split","name","off","join","callbacks","newCallbacks","eventClone","apply","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","time","tick","stop","start","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","quality","qualityMin","qualityMax","trapezoid","slope","roof","x1","x2","x3","verticesPath","maxSides","sides","ceil","theta","PI","path","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","decomp","concave","Polygon","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","chain","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","actualRows","lastBodyWidth","end","newtonsCradle","number","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","normalise","gradient","boundsA","boundsB","vector","shift","deltaX","deltaY","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","points","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","test","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","version","RenderPixi","wireframeBackground","hasBounds","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","currentBackground","_applyBackground","globalCompositeOperation","fillRect","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","setTransform","space","debugTimestamp","text","debugString","font","fillText","beginPath","moveTo","lineTo","stroke","bodyShadows","arc","closePath","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","fill","globalAlpha","_getTexture","rect","corrected","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","cssBackground","backgroundSize","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bd5d20a2d4996a3a1157","const canvas = document.querySelector('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst c = canvas.getContext('2d');\nconst img = new Image();\nimg.onload = function(){\n  c.drawImage(img, 0, 0, canvas.width, canvas.height);\n};\n\nimg.src=\"https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\";\n\nconst World1 = require(\"./world1.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n  window.addEventListener(\"resize\", ()=>{\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    img.onload = function(){\n      c.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n   img.src=\"https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\";\n\n  });\n\n\n\n});\n\nfunction onClick(){\n  new World1();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/tprime.js","const Matter = require(\"../matter\");\n\n//Normal gravity planet\n//pendulums\n//soft bodies\n//bridge\n\n//Visuals:\n  // background: https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\n  // objects:\n      //rain:https://pixabay.com/en/drop-raindrop-water-tear-teardrop-159527/\n      //chains:\n      //slingshot\n      //boxes\n\nconst World1 = function(){\n\n\n   const Engine = Matter.Engine,\n      Render = Matter.Render,\n      Runner = Matter.Runner,\n      World = Matter.World,\n      Mouse = Matter.Mouse,\n      Events = Matter.Events,\n      Constraint = Matter.Constraint,\n      MouseConstraint = Matter.MouseConstraint,\n      Composites = Matter.Composites,\n      Common = Matter.Common,\n      Bodies = Matter.Bodies;\n\n    // create an engine\n    const engine = Engine.create(), world = engine.world;\n    // create a renderer\n\n    const render = Render.create({\n        element: document.body,\n        engine: engine,\n        options: {\n          height: window.innerHeight*0.8,\n          width: window.innerWidth*0.8,\n          wireframes: false,\n          showAngleIndicator: false\n        }\n    });\n    const canvas = render.canvas;\n    const ctx = render.canvas.getContext(\"2d\");\n    console.log(ctx);\n\n    let background = Bodies.rectangle(0,0, 1, 1, {\n      isStatic: true,\n      render: {\n        sprite:{\n          texture: \"https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\",\n          xScale:0.5,\n          yScale: 0.5\n        }\n      },\n      collisionFilter: {\n        group: -1\n      }\n    });\n\n\n    World.add(world, background);\n\n    let ground = Bodies.rectangle(100, 700, 1, 1, {\n      isStatic: true,\n      collisionFilter: {\n        group: -3\n      }\n    }),\n            rockOptions = {\n              density: 0.004,\n              frictionAir: 0,\n              render:{\n                sprite: {\n                  texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n                  xScale: 0.2,\n                  yScale: 0.2\n                }\n              },\n              collisionFilter:{\n                group: -1\n              }\n              },\n            rock = Bodies.polygon(170, 450, 5, 20, rockOptions),\n            anchor = { x: 170, y: 450 },\n            elastic = Constraint.create({\n                pointA: anchor,\n                bodyB: rock,\n                stiffness: 0.08\n            });\n\n        const ground2 = Bodies.rectangle(850, 200, 300, 20, {\n          isStatic: true,\n          collisionFilter: {\n            group: -3\n          },\n          chamfer: {radius: 20},\n          render:{\n            sprite:{\n              texture: \"https://opengameart.org/sites/default/files/styles/medium/public/rock_d01.jpg\",\n              xScale:1,\n              yScale: 0.1\n            }\n          }\n        });\n\n        console.log(ground2);\n        // const ground3 = Bodies.rectangle(500, 350, 300, 20, {\n        //   isStatic: true,\n        //   collisionFilter:{\n        //     group: -3\n        //   },\n        //   chamfer: {radius: 20},\n        //   render:{\n        //     sprite:{\n        //       texture: \"https://opengameart.org/sites/default/files/styles/medium/public/rock_d01.jpg\",\n        //       xScale:1,\n        //       yScale: 0.1\n        //     }\n        //   }\n        // });\n\n        const pyramid = Composites.pyramid(725, 100, 5, 10, 0, 0, function(x, y) {\n            return Bodies.rectangle(x, y, 30, 30, {\n              render:{\n                sprite:{\n                  texture: \"https://opengameart.org/sites/default/files/styles/medium/public/mars_type_planet_0.png\",\n                  xScale: 0.5,\n                  yScale: 0.5\n                }\n              },\n              friction: 2,\n            });\n        });\n\n        World.add(engine.world, [ground, pyramid, ground2, rock, elastic]);\n\n        Events.on(engine, 'afterUpdate', function() {\n            if (mouseConstraint.mouse.button === -1 && (rock.position.x > 190 || rock.position.y < 430)) {\n                rock = Bodies.polygon(170, 450, 7, 20, rockOptions);\n                World.add(engine.world, rock);\n                elastic.bodyB = rock;\n            }\n        });\n\n\n        let interval;\n\n        function makeItRain(){\n          interval = setInterval(rain, 1000);\n        }\n        function makeItRain2(){\n          interval = setInterval(rain2, 600);\n        }\n        function makeItRain3(){\n          interval = setInterval(rain3, 2000);\n        }\n\n        function makeItRain4(){\n          interval = setInterval(rain3, 2800);\n        }\n\n        let raindrop;\n        let raindrop2;\n\n        const rainOptions ={\n          frictionAir: 0.1,\n          mass: 0.00001,\n          collisionFilter: {\n            group: -3\n          },\n          render:{\n            sprite:{\n              texture:\"https://cdn.pixabay.com/photo/2013/07/13/12/16/drop-159527_1280.png\",\n              xScale: 0.01,\n              yScale: 0.01\n            }\n          }\n        };\n\n        function rain(){\n          for (let i = 0; i<3; i++) {\n              raindrop = Bodies.circle(Math.floor(Math.random()*1000), 0, 5, rainOptions);\n              World.add(engine.world, raindrop);\n          }\n        }\n\n        function rain2(){\n          for(let i =0; i<6; i++) {\n            raindrop = Bodies.circle(Math.floor(Math.random()*1000), 0, 5, rainOptions);\n            World.add(engine.world, raindrop);\n          }\n        }\n\n        function rain3(){\n          for(let i =0; i<5; i++) {\n            raindrop = Bodies.circle(Math.floor(Math.random()*1000), 0, 5, rainOptions);\n            World.add(engine.world, raindrop);\n          }\n        }\n\n        makeItRain();\n        makeItRain2();\n        makeItRain3();\n        makeItRain4();\n        // add Runner\n      const runner = Runner.create();\n      Runner.run(runner, engine);\n\n      //add ball of wrecking ball\n      // const ball = Bodies.circle(100, 300, 30, { density: 0.04, frictionAir: 0.000001});\n\n      // World.add(world, ball);\n      // World.add(world, Constraint.create({\n      //     pointA: { x: 300, y: 0 },\n      //     bodyB: ball\n      // }));\n\n\n\n\n        // add mouse control\n        const mouse = Mouse.create(render.canvas),\n            mouseConstraint = MouseConstraint.create(engine, {\n                mouse: mouse,\n                constraint: {\n                    stiffness: 0.2,\n                    render: {\n                        visible: false\n                    }\n                }\n            });\n\n        World.add(world, mouseConstraint);\n\n        // keep the mouse in sync with rendering\n        render.mouse = mouse;\n\n    // add all of the bodies to the world\n    // World.add(engine.world, [boxA, boxB, ground, circleA, circleB]);\n    world.gravity.y = 0.8;\n    // run the engine\n    Engine.run(engine);\n\n    // run the renderer\n    Render.run(render);\n\n};\n\n\n\n\nmodule.exports =  World1;\n\n\n// const Engine = Matter.Engine,\n//   Render = Matter.Render,\n//   World = Matter.World,\n//   Bodies = Matter.Bodies,\n//   Body = Matter.Body;\n//\n// const engine = Engine.create(), world = engine.world;\n// world.gravity.y = 0.1;\n// const render = Render.create({\n//   element: document.body,\n//   engine: engine,\n//   options: {\n//     width: 800,\n//     height: 400,\n//     wireframes: false\n//   }\n// });\n//\n// const topWall = Bodies.rectangle(400, 50, 720, 20, { isStatic: true });\n// const leftWall = Bodies.rectangle(50, 210, 20, 300, { isStatic: true });\n// const rightWall = Bodies.rectangle(750, 210, 20, 300, { isStatic: true });\n// const bottomWall = Bodies.rectangle(400, 370, 720, 40, { isStatic: true });\n//\n// const ball1 = Bodies.circle(600, 180, 20, {\n//   render: {\n//     sprite: {\n//       texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n//       xScale: 0.4,\n//       yScale: 0.4\n//     }\n//   }\n// });\n//\n// const ball2 = Bodies.circle(600, 180, 20, {\n//   render: {\n//     sprite: {\n//       texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n//       xScale: 0.4,\n//       yScale: 0.4\n//     }\n//   }\n// });\n//\n// World.add(engine.world, [topWall, leftWall, rightWall, bottomWall, ball1, ball2]);\n//\n// Engine.run(engine);\n//\n// Render.run(render);\n\n\n\n// WEBPACK FOOTER //\n// ./lib/world1.js","/**\n* matter-js 0.10.0 by @liabru 2016-05-01\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Liam Brummitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Sleeping = require('../core/Sleeping');\nvar Render = require('../render/Render');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\nvar Axes = require('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 1.5\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} options\n     */\n    var _initProperties = function(body, options) {\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#eeeeee' : Common.choose(['#556270', '#4ECDC4', '#C7F464', '#FF6B6B', '#C44D58'])),\n            defaultStrokeStyle = Common.shadeColor(defaultFillStyle, -20);\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass and density are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass is automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = _totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     */\n    Body.rotate = function(body, rotation) {\n        Body.setAngle(body, body.angle + rotation);\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, body.position);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n\n            if (!body.isStatic) {\n                part.area = Vertices.area(part.vertices);\n                Body.setMass(part, body.density * part.area);\n\n                // update inertia (requires vertices to be at origin)\n                Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n                Body.setInertia(part, Vertices.inertia(part.vertices, part.mass));\n                Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n            }\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle circles\n        if (body.circleRadius) {\n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n\n        if (!body.isStatic) {\n            var total = _totalProperties(body);\n            body.area = total.area;\n            Body.setMass(body, total.mass);\n            Body.setInertia(body, total.inertia);\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    var _totalProperties = function(body) {\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            properties.mass += part.mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre,\n                                           Vector.mult(part.position, part.mass !== Infinity ? part.mass : 1));\n        }\n\n        properties.centre = Vector.div(properties.centre,\n                                       properties.mass !== Infinity ? properties.mass : body.parts.length);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body.\n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection.\n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only.\n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only.\n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur.\n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear.\n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model).\n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance).\n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear.\n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n\n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 1.5\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n\n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default\n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29}],2:[function(require,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = require('../core/Events');\nvar Common = require('../core/Common');\nvar Body = require('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite'\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag.\n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.log('Composite.add: skipped adding a compound body part (you must add its parent instead)', 'warn');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n\n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) {\n            return object.id.toString() === id.toString();\n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions,\n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n\n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n\n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"./Body\":1}],3:[function(require,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = require('./Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: {\n                min: { x: -Infinity, y: -Infinity },\n                max: { x: Infinity, y: Infinity }\n            }\n        };\n\n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.add\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n\n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(require,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(require,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = require('./SAT');\nvar Pair = require('./Pair');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":24,\"./Pair\":7,\"./SAT\":11}],6:[function(require,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = require('./Pair');\nvar Detector = require('./Detector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = _getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = _regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = _getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    _bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = _createBucket(buckets, bucketId);\n                            _bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = _createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    var _regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    var _getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    var _createRegion = function(startCol, endCol, startRow, endRow) {\n        return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    var _getBucketId = function(column, row) {\n        return column + ',' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    var _createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    var _createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(require,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = require('./Contact');\n\n(function() {\n\n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n\n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n\n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return bodyA.id + '_' + bodyB.id;\n        } else {\n            return bodyB.id + '_' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(require,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = require('./Pair');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n\n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n\n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n\n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > _pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(require,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = require('../geometry/Vector');\nvar SAT = require('./SAT');\nvar Bounds = require('../geometry/Bounds');\nvar Bodies = require('../factory/Bodies');\nvar Vertices = require('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\n                        var collision = SAT.collides(part, ray);\n                        if (collision.collided) {\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":21,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"./SAT\":11}],10:[function(require,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA),\n                                    Vector.add(bodyA.positionImpulse,\n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor || pair.separation < 0)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],11:[function(require,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA,\n            minOverlap,\n            collision,\n            prevCol = previousCollision,\n            canReusePrevCol = false;\n\n        if (prevCol) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result\n            // but only safe if collision was resting\n            canReusePrevCol = prevCol && prevCol.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = prevCol;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (prevCol && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[prevCol.axisNumber]];\n\n            minOverlap = _overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = _overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = _overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.normal = minOverlap.axis;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(collision.normal, Vector.sub(bodyB.position, bodyA.position)) > 0)\n            collision.normal = Vector.neg(collision.normal);\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = {\n            x: collision.normal.x * collision.depth,\n            y: collision.normal.y * collision.depth\n        };\n\n        // find support points, there is always either exactly one or two\n        var verticesB = _findSupports(bodyA, bodyB, collision.normal),\n            supports = collision.supports || [];\n        supports.length = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = _findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n\n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    var _overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0],\n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            _projectToAxis(projectionA, verticesA, axis);\n            _projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    var _projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n                max = dot;\n            } else if (dot < min) {\n                min = dot;\n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    var _findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],12:[function(require,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\n// TODO: fix instability issues with torque\n// TODO: linked constraints\n// TODO: breakable constraints\n// TODO: collision constraints\n// TODO: allow constrained bodies to sleep\n// TODO: handle 0 length constraints properly\n// TODO: impulse caching and warming\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Sleeping = require('../core/Sleeping');\nvar Bounds = require('../geometry/Bounds');\nvar Axes = require('../geometry/Axes');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _minLength = 0.000001,\n        _minDifference = 0.001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n\n        constraint.length = constraint.length || length || _minLength;\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#666'\n        };\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || 1;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n\n        return constraint;\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        for (var i = 0; i < constraints.length; i++) {\n            Constraint.solve(constraints[i], timeScale);\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            constraint.pointA = Vector.rotate(pointA, bodyA.angle - constraint.angleA);\n            constraint.angleA = bodyA.angle;\n        }\n\n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            constraint.pointB = Vector.rotate(pointB, bodyB.angle - constraint.angleB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength === 0)\n            currentLength = _minLength;\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            normal = Vector.div(delta, currentLength),\n            force = Vector.mult(delta, difference * 0.5 * constraint.stiffness * timeScale * timeScale);\n\n        // if difference is very small, we can skip\n        if (Math.abs(1 - (currentLength / constraint.length)) < _minDifference * timeScale)\n            return;\n\n        var velocityPointA,\n            velocityPointB,\n            offsetA,\n            offsetB,\n            oAn,\n            oBn,\n            bodyADenom,\n            bodyBDenom;\n\n        if (bodyA && !bodyA.isStatic) {\n            // point body offset\n            offsetA = {\n                x: pointAWorld.x - bodyA.position.x + force.x,\n                y: pointAWorld.y - bodyA.position.y + force.y\n            };\n\n            // update velocity\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n\n            // find point velocity and body mass\n            velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity));\n            oAn = Vector.dot(offsetA, normal);\n            bodyADenom = bodyA.inverseMass + bodyA.inverseInertia * oAn * oAn;\n        } else {\n            velocityPointA = { x: 0, y: 0 };\n            bodyADenom = bodyA ? bodyA.inverseMass : 0;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            // point body offset\n            offsetB = {\n                x: pointBWorld.x - bodyB.position.x - force.x,\n                y: pointBWorld.y - bodyB.position.y - force.y\n            };\n\n            // update velocity\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // find point velocity and body mass\n            velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity));\n            oBn = Vector.dot(offsetB, normal);\n            bodyBDenom = bodyB.inverseMass + bodyB.inverseInertia * oBn * oBn;\n        } else {\n            velocityPointB = { x: 0, y: 0 };\n            bodyBDenom = bodyB ? bodyB.inverseMass : 0;\n        }\n\n        var relativeVelocity = Vector.sub(velocityPointB, velocityPointA),\n            normalImpulse = Vector.dot(normal, relativeVelocity) / (bodyADenom + bodyBDenom);\n\n        if (normalImpulse > 0) normalImpulse = 0;\n\n        var normalVelocity = {\n            x: normal.x * normalImpulse,\n            y: normal.y * normalImpulse\n        };\n\n        var torque;\n\n        if (bodyA && !bodyA.isStatic) {\n            torque = Vector.cross(offsetA, normalVelocity) * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x;\n            bodyA.constraintImpulse.y -= force.y;\n            bodyA.constraintImpulse.angle += torque;\n\n            // apply forces\n            bodyA.position.x -= force.x;\n            bodyA.position.y -= force.y;\n            bodyA.angle += torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            torque = Vector.cross(offsetB, normalVelocity) * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x;\n            bodyB.constraintImpulse.y += force.y;\n            bodyB.constraintImpulse.angle -= torque;\n\n            // apply forces\n            bodyB.position.x += force.x;\n            bodyB.position.y += force.y;\n            bodyB.angle -= torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            impulse.angle = 0;\n            impulse.x = 0;\n            impulse.y = 0;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint.\n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],13:[function(require,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = require('../geometry/Vertices');\nvar Sleeping = require('../core/Sleeping');\nvar Mouse = require('../core/Mouse');\nvar Events = require('../core/Events');\nvar Detector = require('../collision/Detector');\nvar Constraint = require('./Constraint');\nvar Composite = require('../body/Composite');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.log('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected', 'warn');\n            }\n        }\n\n        var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'tick', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            _triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position)\n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    var _triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":18,\"../core/Sleeping\":20,\"../geometry/Bounds\":24,\"../geometry/Vertices\":27,\"./Constraint\":12}],14:[function(require,module,exports){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        args = Array.prototype.slice.call(arguments, argsStart);\n\n        for (var i = 0; i < args.length; i++) {\n            var source = args[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n\n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n\n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n\n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Returns a hex colour string made by lightening or darkening color by percent.\n     * @method shadeColor\n     * @param {string} color\n     * @param {number} percent\n     * @return {string} A hex colour\n     */\n    Common.shadeColor = function(color, percent) {\n        // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color\n        var colorInteger = parseInt(color.slice(1),16),\n            amount = Math.round(2.55 * percent),\n            R = (colorInteger >> 16) + amount,\n            B = (colorInteger >> 8 & 0x00FF) + amount,\n            G = (colorInteger & 0x0000FF) + amount;\n        return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R :255) * 0x10000\n                + (B < 255 ? B < 1 ? 0 : B : 255) * 0x100\n                + (G < 255 ? G < 1 ? 0 : G : 255)).toString(16).slice(1);\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        // http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n        try {\n            return obj instanceof HTMLElement;\n        }\n        catch(e){\n            return (typeof obj===\"object\") &&\n              (obj.nodeType===1) && (typeof obj.style === \"object\") &&\n              (typeof obj.ownerDocument ===\"object\");\n        }\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n\n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n\n    /**\n     * Returns the current timestamp (high-res if available).\n     * @method now\n     * @return {number} the current timestamp (high-res if available)\n     */\n    Common.now = function() {\n        // http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript\n        // https://gist.github.com/davidwaterston/2982531\n\n        var performance = window.performance || {};\n\n        performance.now = (function() {\n            return performance.now    ||\n            performance.webkitNow     ||\n            performance.msNow         ||\n            performance.oNow          ||\n            performance.mozNow        ||\n            function() { return +(new Date()); };\n        })();\n\n        return performance.now();\n    };\n\n\n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * A wrapper for console.log, for providing errors and warnings.\n     * @method log\n     * @param {string} message\n     * @param {string} type\n     */\n    Common.log = function(message, type) {\n        if (!console || !console.log || !console.warn)\n            return;\n\n        switch (type) {\n\n        case 'warn':\n            console.warn('Matter.js:', message);\n            break;\n        case 'error':\n            console.log('Matter.js:', message);\n            break;\n\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    var _seededRandom = function() {\n        // https://gist.github.com/ngryman/3830489\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n})();\n\n},{}],15:[function(require,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = require('../body/World');\nvar Sleeping = require('./Sleeping');\nvar Resolver = require('../collision/Resolver');\nvar Render = require('../render/Render');\nvar Pairs = require('../collision/Pairs');\nvar Metrics = require('./Metrics');\nvar Grid = require('../collision/Grid');\nvar Events = require('./Events');\nvar Composite = require('../body/Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('./Common');\nvar Body = require('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.log('Engine.create: engine.render is deprecated (see docs)', 'warn');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n\n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        _bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        _bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        _bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n\n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n\n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n\n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    var _bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    var _bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method updateAll\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime\n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction\n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    var _bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine.\n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`.\n     * It is incremented on every `Engine.update` by the given `delta` argument.\n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":29,\"./Common\":14,\"./Events\":16,\"./Metrics\":17,\"./Sleeping\":20}],16:[function(require,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = require('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(require,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],18:[function(require,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n\n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n\n        mouse.mousemove = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n\n        mouse.mousedown = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n\n        mouse.mouseup = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n\n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    var _getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n\n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return {\n            x: x / (element.clientWidth / element.width * pixelRatio),\n            y: y / (element.clientHeight / element.height * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],19:[function(require,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop,\n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = require('./Events');\nvar Engine = require('./Engine');\nvar Common = require('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n\n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified\n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render);\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],20:[function(require,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = require('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n\n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n\n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n\n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent;\n\n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n\n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],21:[function(require,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models\n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = require('../geometry/Vertices');\nvar Common = require('../core/Common');\nvar Body = require('../body/Body');\nvar Bounds = require('../geometry/Bounds');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = {\n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a trapezoid hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n\n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = {\n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n\n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = {\n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!window.decomp) {\n            Common.log('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.', 'warn');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !window.decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = new decomp.Polygon();\n                for (i = 0; i < vertices.length; i++) {\n                    concave.vertices.push([vertices[i].x, vertices[i].y]);\n                }\n\n                // vertices are concave and simple, we can decompose into parts\n                concave.makeCCW();\n                if (removeCollinear !== false)\n                    concave.removeCollinearPoints(removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = concave.quickDecomp();\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i],\n                        chunkVertices = [];\n\n                    // convert vertices into the correct structure\n                    for (j = 0; j < chunk.vertices.length; j++) {\n                        chunkVertices.push({ x: chunk.vertices[j][0], y: chunk.vertices[j][1] });\n                    }\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],22:[function(require,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = require('../body/Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('../core/Common');\nvar Body = require('../body/Body');\nvar Bodies = require('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n\n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x;\n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n\n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n\n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n\n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n\n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n\n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n\n            var constraint = Common.extend(defaults, options);\n\n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n\n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n\n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n\n        return composite;\n    };\n\n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n\n            if (row > actualRows)\n                return;\n\n            // reverse row order\n            row = actualRows - row;\n\n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n\n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size,\n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = -20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n\n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.trapezoid(xx, yy, width, height, 0.3, {\n                collisionFilter: {\n                    group: group\n                },\n                friction: 0.01,\n                chamfer: {\n                    radius: 10\n                }\n            });\n\n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n\n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n\n        var axelA = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelAOffset, y: wheelYOffset },\n            bodyB: wheelA,\n            stiffness: 0.2\n        });\n\n        var axelB = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelBOffset, y: wheelYOffset },\n            bodyB: wheelB,\n            stiffness: 0.2\n        });\n\n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.4 }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":21}],23:[function(require,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n                    x: vertices[j].y - vertices[i].y,\n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n\n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":26}],24:[function(require,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = {\n            min: { x: 0, y: 0 },\n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n\n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n\n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x\n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n\n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n\n})();\n\n},{}],25:[function(require,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments,\n            segmentsQueue, lastSegment,\n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z')\n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        _svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    var _svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../geometry/Bounds\":24}],26:[function(require,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @return {vector} A new vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        return {\n            x: vector.x * cos - vector.y * sin,\n            y: vector.x * sin + vector.y * cos\n        };\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle in radians between the two vectors relative to the x-axis.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [Vector.create(), Vector.create(),\n                    Vector.create(), Vector.create(),\n                    Vector.create(), Vector.create()];\n\n})();\n},{}],27:[function(require,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas),\n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        radius = radius || [8];\n\n        if (!radius.length)\n            radius = [radius];\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({\n                x: vertex.y - prevVertex.y,\n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({\n                x: nextVertex.y - vertex.y,\n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\n\n        var upper = [],\n            lower = [],\n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2\n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i--) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2\n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":26}],28:[function(require,module,exports){\nvar Matter = module.exports = {};\nMatter.version = 'master';\n\nMatter.Body = require('../body/Body');\nMatter.Composite = require('../body/Composite');\nMatter.World = require('../body/World');\n\nMatter.Contact = require('../collision/Contact');\nMatter.Detector = require('../collision/Detector');\nMatter.Grid = require('../collision/Grid');\nMatter.Pairs = require('../collision/Pairs');\nMatter.Pair = require('../collision/Pair');\nMatter.Query = require('../collision/Query');\nMatter.Resolver = require('../collision/Resolver');\nMatter.SAT = require('../collision/SAT');\n\nMatter.Constraint = require('../constraint/Constraint');\nMatter.MouseConstraint = require('../constraint/MouseConstraint');\n\nMatter.Common = require('../core/Common');\nMatter.Engine = require('../core/Engine');\nMatter.Events = require('../core/Events');\nMatter.Mouse = require('../core/Mouse');\nMatter.Runner = require('../core/Runner');\nMatter.Sleeping = require('../core/Sleeping');\n\n\nMatter.Bodies = require('../factory/Bodies');\nMatter.Composites = require('../factory/Composites');\n\nMatter.Axes = require('../geometry/Axes');\nMatter.Bounds = require('../geometry/Bounds');\nMatter.Svg = require('../geometry/Svg');\nMatter.Vector = require('../geometry/Vector');\nMatter.Vertices = require('../geometry/Vertices');\n\nMatter.Render = require('../render/Render');\nMatter.RenderPixi = require('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Metrics\":17,\"../core/Mouse\":18,\"../core/Runner\":19,\"../core/Sleeping\":20,\"../factory/Bodies\":21,\"../factory/Composites\":22,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Svg\":25,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29,\"../render/RenderPixi\":30}],29:[function(require,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = require('../core/Common');\nvar Composite = require('../body/Composite');\nvar Bounds = require('../geometry/Bounds');\nvar Events = require('../core/Events');\nvar Grid = require('../collision/Grid');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / options.width,\n                boundsScaleY = boundsHeight / options.height;\n\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            context.setTransform(options.pixelRatio, 0, 0, options.pixelRatio, 0, 0);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB;\n\n            if (bodyA) {\n                c.beginPath();\n                c.moveTo(bodyA.position.x + constraint.pointA.x, bodyA.position.y + constraint.pointA.y);\n            } else {\n                c.beginPath();\n                c.moveTo(constraint.pointA.x, constraint.pointA.y);\n            }\n\n            if (bodyB) {\n                c.lineTo(bodyB.position.x + constraint.pointB.x, bodyB.position.y + constraint.pointB.y);\n            } else {\n                c.lineTo(constraint.pointB.x, constraint.pointB.y);\n            }\n\n            c.lineWidth = constraint.render.lineWidth;\n            c.strokeStyle = constraint.render.strokeStyle;\n            c.stroke();\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n                        c.lineWidth = part.render.lineWidth;\n                        c.strokeStyle = part.render.strokeStyle;\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                    }\n\n                    c.stroke();\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.8)';\n            c.globalCompositeOperation = 'overlay';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(',');\n            c.rect(0.5 + parseInt(region[0], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[1], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":24,\"../geometry/Vector\":26}],30:[function(require,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Composite = require('../body/Composite');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.log('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)', 'warn');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('No \"render.element\" passed, \"render.canvas\" was not inserted into document.', 'warn');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) {\n            container.removeChild(container.children[0]);\n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas\n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite);\n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n\n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x),\n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14}]},{},[28])(28)\n});\n\n\n\n// WEBPACK FOOTER //\n// ./matter.js"],"sourceRoot":""}