{"version":3,"sources":["webpack:///webpack/bootstrap 27f3b508735ce5e13d6c","webpack:///./lib/tprime.js","webpack:///./lib/world1.js","webpack:///./matter.js"],"names":["canvas","document","querySelector","width","window","innerWidth","height","innerHeight","c","getContext","World1","require","addEventListener","Matter","myCanvas","Engine","Render","Runner","World","Mouse","Events","Constraint","MouseConstraint","Composites","Common","Bodies","engine","create","world","render","element","options","wireframes","showAngleIndicator","console","log","ground","rectangle","isStatic","rockOptions","density","frictionAir","sprite","texture","xScale","yScale","rock","polygon","anchor","x","y","elastic","pointA","bodyB","stiffness","pyramid","ground2","chamfer","radius","ground3","pyramid2","add","on","mouseConstraint","mouse","button","position","runner","run","ball","circle","constraint","visible","gravity","module","exports","f","define","g","global","self","e","t","n","r","s","o","u","a","i","Error","code","l","call","length","Body","Vertices","Vector","Sleeping","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","id","nextId","type","label","parts","angle","vertices","fromPath","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","restitution","friction","frictionStatic","collisionFilter","category","mask","group","slop","timeScale","opacity","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","defaultStrokeStyle","shadeColor","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","Infinity","inverseMass","inverseInertia","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","rotation","scale","scaleX","scaleY","point","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","Composite","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","addBody","addConstraint","addComposite","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","cos","sin","dx","dy","Contact","vertex","normalImpulse","tangentImpulse","index","Detector","SAT","Pair","collisions","broadphasePairs","pairsTable","pairs","table","bodyA","canCollide","overlaps","j","partA","k","partB","pairId","pair","previousCollision","isActive","collision","collides","collided","filterA","filterB","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","indexesToRemove","pairIndex","Query","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","result","contains","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","contactCount","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","overlapAB","overlapBA","minOverlap","prevCol","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","neg","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","vertexToBody","bodyAPosition","distance","vertexA","vertexB","prevIndex","nextIndex","_minLength","_minDifference","pointB","initialPointA","initialPointB","angularStiffness","angleA","angleB","solveAll","solve","pointAWorld","pointBWorld","currentLength","difference","oAn","oBn","bodyADenom","bodyBDenom","postSolveAll","_triggerEvents","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","_nextId","_seed","argsStart","args","deepClone","Array","prototype","arguments","source","prop","constructor","Object","key","values","color","percent","colorInteger","parseInt","amount","round","R","B","G","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","style","ownerDocument","isArray","now","performance","webkitNow","msNow","oNow","mozNow","Date","_seededRandom","colorToNumber","colorString","replace","charAt","message","warn","haystack","needle","Metrics","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","eventNames","callback","names","split","name","off","join","callbacks","newCallbacks","eventClone","apply","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","time","tick","stop","start","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","quality","qualityMin","qualityMax","trapezoid","slope","roof","x1","x2","x3","verticesPath","maxSides","sides","ceil","theta","PI","path","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","decomp","concave","Polygon","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","chain","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","actualRows","lastBodyWidth","end","newtonsCradle","number","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","normalise","gradient","boundsA","boundsB","vector","shift","deltaX","deltaY","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","points","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","test","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","version","RenderPixi","background","wireframeBackground","hasBounds","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","currentBackground","_applyBackground","globalCompositeOperation","fillRect","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","setTransform","space","debugTimestamp","text","debugString","font","fillText","beginPath","moveTo","lineTo","stroke","bodyShadows","arc","closePath","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","fill","globalAlpha","_getTexture","drawImage","rect","corrected","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 27f3b508735ce5e13d6c","const canvas = document.querySelector('canvas');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst c = canvas.getContext('2d');\n// const img = new Image();\n// img.onload = function(){\n//   c.drawImage(img, 0, 0, canvas.width, canvas.height);\n// };\n\n//img.src=\"https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\";\n\nconst World1 = require(\"./world1.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n  window.addEventListener(\"resize\", ()=>{\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  //   img.onload = function(){\n  //     c.drawImage(img, 0, 0, canvas.width, canvas.height);\n  //   };\n  //  img.src=\"https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\";\n  });\n\n  new World1(canvas);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/tprime.js","const Matter = require(\"../matter\");\n\n//Normal gravity planet\n//pendulums\n//soft bodies\n//bridge\n\n//Visuals:\n  // background: https://static.pexels.com/photos/531360/pexels-photo-531360.jpeg\n  // objects:\n      //rain:https://pixabay.com/en/drop-raindrop-water-tear-teardrop-159527/\n      //chains:\n      //slingshot\n      //boxes\n\nconst World1 = function(myCanvas){\n\n\n   const Engine = Matter.Engine,\n      Render = Matter.Render,\n      Runner = Matter.Runner,\n      World = Matter.World,\n      Mouse = Matter.Mouse,\n      Events = Matter.Events,\n      Constraint = Matter.Constraint,\n      MouseConstraint = Matter.MouseConstraint,\n      Composites = Matter.Composites,\n      Common = Matter.Common,\n      Bodies = Matter.Bodies;\n\n    // create an engine\n    const engine = Engine.create(), world = engine.world;\n    // create a renderer\n\n\n    const render = Render.create({\n        element: myCanvas,\n        engine: engine,\n        options: {\n          wireframes: false,\n          showAngleIndicator: false\n        }\n    });\n\n    console.log(render);\n\n    let ground = Bodies.rectangle(100, 700, 815, 50, { isStatic: true }),\n            rockOptions = {\n              density: 0.004,\n              frictionAir: 0,\n              render:{\n                sprite: {\n                  texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n                  xScale: 0.2,\n                  yScale: 0.2\n                }\n              }\n              },\n            rock = Bodies.polygon(170, 450, 5, 20, rockOptions),\n            anchor = { x: 170, y: 450 },\n            elastic = Constraint.create({\n                pointA: anchor,\n                bodyB: rock,\n                stiffness: 0.08\n            });\n\n        const pyramid = Composites.pyramid(300, 200, 5, 10, 0, 0, function(x, y) {\n            return Bodies.rectangle(x, y, 25, 25, {\n              render:{\n                sprite: {\n                  texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n                  xScale: 0.3,\n                  yScale: 0.3\n                }\n              },\n              frictionAir: 0\n            });\n        });\n\n        const ground2 = Bodies.rectangle(610, 200, 100, 20, {\n          isStatic: true,\n          chamfer: {radius: 20},\n          render:{\n            sprite:{\n              texture: \"https://opengameart.org/sites/default/files/styles/medium/public/rock_d01.jpg\",\n              xScale:0.5,\n              yScale: 0.1\n            }\n          }\n        });\n\n        const ground3 = Bodies.rectangle(370, 300, 150, 20, {\n          isStatic: true,\n          chamfer: {radius: 20},\n          render:{\n            sprite:{\n              texture: \"https://opengameart.org/sites/default/files/styles/medium/public/rock_d01.jpg\",\n              xScale:0.5,\n              yScale: 0.1\n            }\n          }\n        });\n\n        const pyramid2 = Composites.pyramid(550, 100, 5, 10, 0, 0, function(x, y) {\n            return Bodies.rectangle(x, y, 25, 25, {\n              render:{\n                sprite:{\n                  texture: \"https://opengameart.org/sites/default/files/styles/medium/public/mars_type_planet_0.png\",\n                  xScale: 0.5,\n                  yScale: 0.5\n                }\n              },\n              frictionAir: 0\n            });\n        });\n\n        World.add(engine.world, [ground, pyramid, ground2, ground3, pyramid2, rock, elastic]);\n\n        Events.on(engine, 'afterUpdate', function() {\n            if (mouseConstraint.mouse.button === -1 && (rock.position.x > 190 || rock.position.y < 430)) {\n                rock = Bodies.polygon(170, 450, 7, 20, rockOptions);\n                World.add(engine.world, rock);\n                elastic.bodyB = rock;\n            }\n        });\n\n        // add Runner\n      const runner = Runner.create();\n      Runner.run(runner, engine);\n\n      //add ball of wrecking ball\n      const ball = Bodies.circle(100, 300, 30, { density: 0.04, frictionAir: 0.000001});\n\n      // World.add(world, ball);\n      // World.add(world, Constraint.create({\n      //     pointA: { x: 300, y: 0 },\n      //     bodyB: ball\n      // }));\n\n\n\n\n        // add mouse control\n        const mouse = Mouse.create(render.canvas),\n            mouseConstraint = MouseConstraint.create(engine, {\n                mouse: mouse,\n                constraint: {\n                    stiffness: 0.2,\n                    render: {\n                        visible: false\n                    }\n                }\n            });\n\n        World.add(world, mouseConstraint);\n\n        // keep the mouse in sync with rendering\n        render.mouse = mouse;\n\n    // add all of the bodies to the world\n    // World.add(engine.world, [boxA, boxB, ground, circleA, circleB]);\n    world.gravity.y = 0;\n    // run the engine\n    Engine.run(engine);\n\n    // run the renderer\n    Render.run(render);\n\n};\n\n\n\n\nmodule.exports =  World1;\n\n\n// const Engine = Matter.Engine,\n//   Render = Matter.Render,\n//   World = Matter.World,\n//   Bodies = Matter.Bodies,\n//   Body = Matter.Body;\n//\n// const engine = Engine.create(), world = engine.world;\n// world.gravity.y = 0.1;\n// const render = Render.create({\n//   element: document.body,\n//   engine: engine,\n//   options: {\n//     width: 800,\n//     height: 400,\n//     wireframes: false\n//   }\n// });\n//\n// const topWall = Bodies.rectangle(400, 50, 720, 20, { isStatic: true });\n// const leftWall = Bodies.rectangle(50, 210, 20, 300, { isStatic: true });\n// const rightWall = Bodies.rectangle(750, 210, 20, 300, { isStatic: true });\n// const bottomWall = Bodies.rectangle(400, 370, 720, 40, { isStatic: true });\n//\n// const ball1 = Bodies.circle(600, 180, 20, {\n//   render: {\n//     sprite: {\n//       texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n//       xScale: 0.4,\n//       yScale: 0.4\n//     }\n//   }\n// });\n//\n// const ball2 = Bodies.circle(600, 180, 20, {\n//   render: {\n//     sprite: {\n//       texture: \"https://opengameart.org/sites/default/files/styles/medium/public/earththumb.png\",\n//       xScale: 0.4,\n//       yScale: 0.4\n//     }\n//   }\n// });\n//\n// World.add(engine.world, [topWall, leftWall, rightWall, bottomWall, ball1, ball2]);\n//\n// Engine.run(engine);\n//\n// Render.run(render);\n\n\n\n// WEBPACK FOOTER //\n// ./lib/world1.js","/**\n* matter-js 0.10.0 by @liabru 2016-05-01\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Liam Brummitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Sleeping = require('../core/Sleeping');\nvar Render = require('../render/Render');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\nvar Axes = require('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 1.5\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} options\n     */\n    var _initProperties = function(body, options) {\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#eeeeee' : Common.choose(['#556270', '#4ECDC4', '#C7F464', '#FF6B6B', '#C44D58'])),\n            defaultStrokeStyle = Common.shadeColor(defaultFillStyle, -20);\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass and density are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass is automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = _totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     */\n    Body.rotate = function(body, rotation) {\n        Body.setAngle(body, body.angle + rotation);\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, body.position);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n\n            if (!body.isStatic) {\n                part.area = Vertices.area(part.vertices);\n                Body.setMass(part, body.density * part.area);\n\n                // update inertia (requires vertices to be at origin)\n                Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n                Body.setInertia(part, Vertices.inertia(part.vertices, part.mass));\n                Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n            }\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle circles\n        if (body.circleRadius) {\n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n\n        if (!body.isStatic) {\n            var total = _totalProperties(body);\n            body.area = total.area;\n            Body.setMass(body, total.mass);\n            Body.setInertia(body, total.inertia);\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    var _totalProperties = function(body) {\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            properties.mass += part.mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre,\n                                           Vector.mult(part.position, part.mass !== Infinity ? part.mass : 1));\n        }\n\n        properties.centre = Vector.div(properties.centre,\n                                       properties.mass !== Infinity ? properties.mass : body.parts.length);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body.\n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection.\n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only.\n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only.\n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur.\n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear.\n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model).\n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance).\n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear.\n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n\n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 1.5\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n\n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default\n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29}],2:[function(require,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = require('../core/Events');\nvar Common = require('../core/Common');\nvar Body = require('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite'\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag.\n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.log('Composite.add: skipped adding a compound body part (you must add its parent instead)', 'warn');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n\n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) {\n            return object.id.toString() === id.toString();\n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions,\n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n\n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n\n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"./Body\":1}],3:[function(require,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = require('./Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: {\n                min: { x: -Infinity, y: -Infinity },\n                max: { x: Infinity, y: Infinity }\n            }\n        };\n\n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.add\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n\n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(require,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(require,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = require('./SAT');\nvar Pair = require('./Pair');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":24,\"./Pair\":7,\"./SAT\":11}],6:[function(require,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = require('./Pair');\nvar Detector = require('./Detector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = _getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = _regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = _getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    _bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = _createBucket(buckets, bucketId);\n                            _bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = _createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    var _regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    var _getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return _createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    var _createRegion = function(startCol, endCol, startRow, endRow) {\n        return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    var _getBucketId = function(column, row) {\n        return column + ',' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    var _createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    var _bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    var _createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(require,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = require('./Contact');\n\n(function() {\n\n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n\n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n\n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return bodyA.id + '_' + bodyB.id;\n        } else {\n            return bodyB.id + '_' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(require,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = require('./Pair');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n\n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n\n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n\n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > _pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(require,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = require('../geometry/Vector');\nvar SAT = require('./SAT');\nvar Bounds = require('../geometry/Bounds');\nvar Bodies = require('../factory/Bodies');\nvar Vertices = require('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\n                        var collision = SAT.collides(part, ray);\n                        if (collision.collided) {\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":21,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"./SAT\":11}],10:[function(require,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA),\n                                    Vector.add(bodyA.positionImpulse,\n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor || pair.separation < 0)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],11:[function(require,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA,\n            minOverlap,\n            collision,\n            prevCol = previousCollision,\n            canReusePrevCol = false;\n\n        if (prevCol) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result\n            // but only safe if collision was resting\n            canReusePrevCol = prevCol && prevCol.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = prevCol;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (prevCol && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[prevCol.axisNumber]];\n\n            minOverlap = _overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = _overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = _overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.normal = minOverlap.axis;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(collision.normal, Vector.sub(bodyB.position, bodyA.position)) > 0)\n            collision.normal = Vector.neg(collision.normal);\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = {\n            x: collision.normal.x * collision.depth,\n            y: collision.normal.y * collision.depth\n        };\n\n        // find support points, there is always either exactly one or two\n        var verticesB = _findSupports(bodyA, bodyB, collision.normal),\n            supports = collision.supports || [];\n        supports.length = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = _findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n\n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    var _overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0],\n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            _projectToAxis(projectionA, verticesA, axis);\n            _projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    var _projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n                max = dot;\n            } else if (dot < min) {\n                min = dot;\n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    var _findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],12:[function(require,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\n// TODO: fix instability issues with torque\n// TODO: linked constraints\n// TODO: breakable constraints\n// TODO: collision constraints\n// TODO: allow constrained bodies to sleep\n// TODO: handle 0 length constraints properly\n// TODO: impulse caching and warming\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = require('../geometry/Vertices');\nvar Vector = require('../geometry/Vector');\nvar Sleeping = require('../core/Sleeping');\nvar Bounds = require('../geometry/Bounds');\nvar Axes = require('../geometry/Axes');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _minLength = 0.000001,\n        _minDifference = 0.001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n\n        constraint.length = constraint.length || length || _minLength;\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#666'\n        };\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || 1;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n\n        return constraint;\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        for (var i = 0; i < constraints.length; i++) {\n            Constraint.solve(constraints[i], timeScale);\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            constraint.pointA = Vector.rotate(pointA, bodyA.angle - constraint.angleA);\n            constraint.angleA = bodyA.angle;\n        }\n\n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            constraint.pointB = Vector.rotate(pointB, bodyB.angle - constraint.angleB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength === 0)\n            currentLength = _minLength;\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            normal = Vector.div(delta, currentLength),\n            force = Vector.mult(delta, difference * 0.5 * constraint.stiffness * timeScale * timeScale);\n\n        // if difference is very small, we can skip\n        if (Math.abs(1 - (currentLength / constraint.length)) < _minDifference * timeScale)\n            return;\n\n        var velocityPointA,\n            velocityPointB,\n            offsetA,\n            offsetB,\n            oAn,\n            oBn,\n            bodyADenom,\n            bodyBDenom;\n\n        if (bodyA && !bodyA.isStatic) {\n            // point body offset\n            offsetA = {\n                x: pointAWorld.x - bodyA.position.x + force.x,\n                y: pointAWorld.y - bodyA.position.y + force.y\n            };\n\n            // update velocity\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n\n            // find point velocity and body mass\n            velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity));\n            oAn = Vector.dot(offsetA, normal);\n            bodyADenom = bodyA.inverseMass + bodyA.inverseInertia * oAn * oAn;\n        } else {\n            velocityPointA = { x: 0, y: 0 };\n            bodyADenom = bodyA ? bodyA.inverseMass : 0;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            // point body offset\n            offsetB = {\n                x: pointBWorld.x - bodyB.position.x - force.x,\n                y: pointBWorld.y - bodyB.position.y - force.y\n            };\n\n            // update velocity\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // find point velocity and body mass\n            velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity));\n            oBn = Vector.dot(offsetB, normal);\n            bodyBDenom = bodyB.inverseMass + bodyB.inverseInertia * oBn * oBn;\n        } else {\n            velocityPointB = { x: 0, y: 0 };\n            bodyBDenom = bodyB ? bodyB.inverseMass : 0;\n        }\n\n        var relativeVelocity = Vector.sub(velocityPointB, velocityPointA),\n            normalImpulse = Vector.dot(normal, relativeVelocity) / (bodyADenom + bodyBDenom);\n\n        if (normalImpulse > 0) normalImpulse = 0;\n\n        var normalVelocity = {\n            x: normal.x * normalImpulse,\n            y: normal.y * normalImpulse\n        };\n\n        var torque;\n\n        if (bodyA && !bodyA.isStatic) {\n            torque = Vector.cross(offsetA, normalVelocity) * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x;\n            bodyA.constraintImpulse.y -= force.y;\n            bodyA.constraintImpulse.angle += torque;\n\n            // apply forces\n            bodyA.position.x -= force.x;\n            bodyA.position.y -= force.y;\n            bodyA.angle += torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            torque = Vector.cross(offsetB, normalVelocity) * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x;\n            bodyB.constraintImpulse.y += force.y;\n            bodyB.constraintImpulse.angle -= torque;\n\n            // apply forces\n            bodyB.position.x += force.x;\n            bodyB.position.y += force.y;\n            bodyB.angle -= torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            impulse.angle = 0;\n            impulse.x = 0;\n            impulse.y = 0;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint.\n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],13:[function(require,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = require('../geometry/Vertices');\nvar Sleeping = require('../core/Sleeping');\nvar Mouse = require('../core/Mouse');\nvar Events = require('../core/Events');\nvar Detector = require('../collision/Detector');\nvar Constraint = require('./Constraint');\nvar Composite = require('../body/Composite');\nvar Common = require('../core/Common');\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.log('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected', 'warn');\n            }\n        }\n\n        var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'tick', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            _triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position)\n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    var _triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":18,\"../core/Sleeping\":20,\"../geometry/Bounds\":24,\"../geometry/Vertices\":27,\"./Constraint\":12}],14:[function(require,module,exports){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        args = Array.prototype.slice.call(arguments, argsStart);\n\n        for (var i = 0; i < args.length; i++) {\n            var source = args[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n\n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n\n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n\n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Returns a hex colour string made by lightening or darkening color by percent.\n     * @method shadeColor\n     * @param {string} color\n     * @param {number} percent\n     * @return {string} A hex colour\n     */\n    Common.shadeColor = function(color, percent) {\n        // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color\n        var colorInteger = parseInt(color.slice(1),16),\n            amount = Math.round(2.55 * percent),\n            R = (colorInteger >> 16) + amount,\n            B = (colorInteger >> 8 & 0x00FF) + amount,\n            G = (colorInteger & 0x0000FF) + amount;\n        return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R :255) * 0x10000\n                + (B < 255 ? B < 1 ? 0 : B : 255) * 0x100\n                + (G < 255 ? G < 1 ? 0 : G : 255)).toString(16).slice(1);\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        // http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n        try {\n            return obj instanceof HTMLElement;\n        }\n        catch(e){\n            return (typeof obj===\"object\") &&\n              (obj.nodeType===1) && (typeof obj.style === \"object\") &&\n              (typeof obj.ownerDocument ===\"object\");\n        }\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n\n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n\n    /**\n     * Returns the current timestamp (high-res if available).\n     * @method now\n     * @return {number} the current timestamp (high-res if available)\n     */\n    Common.now = function() {\n        // http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript\n        // https://gist.github.com/davidwaterston/2982531\n\n        var performance = window.performance || {};\n\n        performance.now = (function() {\n            return performance.now    ||\n            performance.webkitNow     ||\n            performance.msNow         ||\n            performance.oNow          ||\n            performance.mozNow        ||\n            function() { return +(new Date()); };\n        })();\n\n        return performance.now();\n    };\n\n\n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * A wrapper for console.log, for providing errors and warnings.\n     * @method log\n     * @param {string} message\n     * @param {string} type\n     */\n    Common.log = function(message, type) {\n        if (!console || !console.log || !console.warn)\n            return;\n\n        switch (type) {\n\n        case 'warn':\n            console.warn('Matter.js:', message);\n            break;\n        case 'error':\n            console.log('Matter.js:', message);\n            break;\n\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    var _seededRandom = function() {\n        // https://gist.github.com/ngryman/3830489\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n})();\n\n},{}],15:[function(require,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = require('../body/World');\nvar Sleeping = require('./Sleeping');\nvar Resolver = require('../collision/Resolver');\nvar Render = require('../render/Render');\nvar Pairs = require('../collision/Pairs');\nvar Metrics = require('./Metrics');\nvar Grid = require('../collision/Grid');\nvar Events = require('./Events');\nvar Composite = require('../body/Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('./Common');\nvar Body = require('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.log('Engine.create: engine.render is deprecated (see docs)', 'warn');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n\n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        _bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        _bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        _bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n\n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n\n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n\n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    var _bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    var _bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method updateAll\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime\n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction\n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    var _bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine.\n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`.\n     * It is incremented on every `Engine.update` by the given `delta` argument.\n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":29,\"./Common\":14,\"./Events\":16,\"./Metrics\":17,\"./Sleeping\":20}],16:[function(require,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = require('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(require,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],18:[function(require,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n\n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n\n        mouse.mousemove = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n\n        mouse.mousedown = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n\n        mouse.mouseup = function(event) {\n            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n\n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    var _getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n\n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return {\n            x: x / (element.clientWidth / element.width * pixelRatio),\n            y: y / (element.clientHeight / element.height * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],19:[function(require,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop,\n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = require('./Events');\nvar Engine = require('./Engine');\nvar Common = require('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n\n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified\n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render);\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],20:[function(require,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = require('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n\n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n\n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n\n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent;\n\n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n\n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],21:[function(require,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models\n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = require('../geometry/Vertices');\nvar Common = require('../core/Common');\nvar Body = require('../body/Body');\nvar Bounds = require('../geometry/Bounds');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = {\n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a trapezoid hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n\n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = {\n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n\n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides.\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = {\n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius,\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!window.decomp) {\n            Common.log('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.', 'warn');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !window.decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = new decomp.Polygon();\n                for (i = 0; i < vertices.length; i++) {\n                    concave.vertices.push([vertices[i].x, vertices[i].y]);\n                }\n\n                // vertices are concave and simple, we can decompose into parts\n                concave.makeCCW();\n                if (removeCollinear !== false)\n                    concave.removeCollinearPoints(removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = concave.quickDecomp();\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i],\n                        chunkVertices = [];\n\n                    // convert vertices into the correct structure\n                    for (j = 0; j < chunk.vertices.length; j++) {\n                        chunkVertices.push({ x: chunk.vertices[j][0], y: chunk.vertices[j][1] });\n                    }\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],22:[function(require,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = require('../body/Composite');\nvar Constraint = require('../constraint/Constraint');\nvar Common = require('../core/Common');\nvar Body = require('../body/Body');\nvar Bodies = require('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n\n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x;\n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n\n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n\n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n\n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n\n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n\n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n\n            var constraint = Common.extend(defaults, options);\n\n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n\n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n\n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n\n        return composite;\n    };\n\n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n\n            if (row > actualRows)\n                return;\n\n            // reverse row order\n            row = actualRows - row;\n\n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n\n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size,\n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = -20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n\n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.trapezoid(xx, yy, width, height, 0.3, {\n                collisionFilter: {\n                    group: group\n                },\n                friction: 0.01,\n                chamfer: {\n                    radius: 10\n                }\n            });\n\n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n\n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8,\n            density: 0.01\n        });\n\n        var axelA = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelAOffset, y: wheelYOffset },\n            bodyB: wheelA,\n            stiffness: 0.2\n        });\n\n        var axelB = Constraint.create({\n            bodyA: body,\n            pointA: { x: wheelBOffset, y: wheelYOffset },\n            bodyB: wheelB,\n            stiffness: 0.2\n        });\n\n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.4 }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":21}],23:[function(require,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n                    x: vertices[j].y - vertices[i].y,\n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n\n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":26}],24:[function(require,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = {\n            min: { x: 0, y: 0 },\n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n\n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n\n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x\n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n\n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n\n})();\n\n},{}],25:[function(require,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = require('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments,\n            segmentsQueue, lastSegment,\n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z')\n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        _svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    var _svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../geometry/Bounds\":24}],26:[function(require,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @return {vector} A new vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        return {\n            x: vector.x * cos - vector.y * sin,\n            y: vector.x * sin + vector.y * cos\n        };\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle in radians between the two vectors relative to the x-axis.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [Vector.create(), Vector.create(),\n                    Vector.create(), Vector.create(),\n                    Vector.create(), Vector.create()];\n\n})();\n},{}],27:[function(require,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = require('../geometry/Vector');\nvar Common = require('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas),\n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        radius = radius || [8];\n\n        if (!radius.length)\n            radius = [radius];\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({\n                x: vertex.y - prevVertex.y,\n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({\n                x: nextVertex.y - vertex.y,\n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\n\n        var upper = [],\n            lower = [],\n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2\n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i--) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2\n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":26}],28:[function(require,module,exports){\nvar Matter = module.exports = {};\nMatter.version = 'master';\n\nMatter.Body = require('../body/Body');\nMatter.Composite = require('../body/Composite');\nMatter.World = require('../body/World');\n\nMatter.Contact = require('../collision/Contact');\nMatter.Detector = require('../collision/Detector');\nMatter.Grid = require('../collision/Grid');\nMatter.Pairs = require('../collision/Pairs');\nMatter.Pair = require('../collision/Pair');\nMatter.Query = require('../collision/Query');\nMatter.Resolver = require('../collision/Resolver');\nMatter.SAT = require('../collision/SAT');\n\nMatter.Constraint = require('../constraint/Constraint');\nMatter.MouseConstraint = require('../constraint/MouseConstraint');\n\nMatter.Common = require('../core/Common');\nMatter.Engine = require('../core/Engine');\nMatter.Events = require('../core/Events');\nMatter.Mouse = require('../core/Mouse');\nMatter.Runner = require('../core/Runner');\nMatter.Sleeping = require('../core/Sleeping');\n\n\nMatter.Bodies = require('../factory/Bodies');\nMatter.Composites = require('../factory/Composites');\n\nMatter.Axes = require('../geometry/Axes');\nMatter.Bounds = require('../geometry/Bounds');\nMatter.Svg = require('../geometry/Svg');\nMatter.Vector = require('../geometry/Vector');\nMatter.Vertices = require('../geometry/Vertices');\n\nMatter.Render = require('../render/Render');\nMatter.RenderPixi = require('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Metrics\":17,\"../core/Mouse\":18,\"../core/Runner\":19,\"../core/Sleeping\":20,\"../factory/Bodies\":21,\"../factory/Composites\":22,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Svg\":25,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29,\"../render/RenderPixi\":30}],29:[function(require,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = require('../core/Common');\nvar Composite = require('../body/Composite');\nvar Bounds = require('../geometry/Bounds');\nvar Events = require('../core/Events');\nvar Grid = require('../collision/Grid');\nvar Vector = require('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / options.width,\n                boundsScaleY = boundsHeight / options.height;\n\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            context.setTransform(options.pixelRatio, 0, 0, options.pixelRatio, 0, 0);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB;\n\n            if (bodyA) {\n                c.beginPath();\n                c.moveTo(bodyA.position.x + constraint.pointA.x, bodyA.position.y + constraint.pointA.y);\n            } else {\n                c.beginPath();\n                c.moveTo(constraint.pointA.x, constraint.pointA.y);\n            }\n\n            if (bodyB) {\n                c.lineTo(bodyB.position.x + constraint.pointB.x, bodyB.position.y + constraint.pointB.y);\n            } else {\n                c.lineTo(constraint.pointB.x, constraint.pointB.y);\n            }\n\n            c.lineWidth = constraint.render.lineWidth;\n            c.strokeStyle = constraint.render.strokeStyle;\n            c.stroke();\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n                        c.lineWidth = part.render.lineWidth;\n                        c.strokeStyle = part.render.strokeStyle;\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                    }\n\n                    c.stroke();\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.8)';\n            c.globalCompositeOperation = 'overlay';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(',');\n            c.rect(0.5 + parseInt(region[0], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[1], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":24,\"../geometry/Vector\":26}],30:[function(require,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Composite = require('../body/Composite');\nvar Common = require('../core/Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.log('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)', 'warn');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.log('No \"render.element\" passed, \"render.canvas\" was not inserted into document.', 'warn');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) {\n            container.removeChild(container.children[0]);\n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas\n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite);\n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n\n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x),\n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14}]},{},[28])(28)\n});\n\n\n\n// WEBPACK FOOTER //\n// ./matter.js"],"sourceRoot":""}